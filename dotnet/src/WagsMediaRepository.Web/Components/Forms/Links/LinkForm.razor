@using WagsMediaRepository.Web.Handlers.Commands.Links
@using WagsMediaRepository.Web.Handlers.Queries.Links

<EditForm EditContext="_editContext" OnSubmit="@SubmitForm" FormName="link-form">
    <DataAnnotationsValidator/>

    @if (!string.IsNullOrWhiteSpace(_pageError))
    {
        <div class="alert error">
            @_pageError
        </div>
    }

    <fieldset disabled="@_isProcessing" aria-busy="@_isProcessing">
        <div class="form-field">
            <label for="title">
                <span class="required-indicator">*</span>Title
                <InputText type="text" id="title" @bind-Value="@_model.Title" />
                <ValidationMessage For="@(() => _model.Title)"></ValidationMessage>
            </label>
        </div>

        <div class="form-field">
            <label for="author">
                <span class="required-indicator">*</span>Author
                <InputText type="text" id="author" @bind-Value="@_model.Author" />
                <ValidationMessage For="@(() => _model.Author)"></ValidationMessage>
            </label>
        </div>

        <div class="form-field">
            <label for="url">
                <span class="required-indicator">*</span>URL
                <InputText type="text" id="url" @bind-Value="@_model.Url" />
                <ValidationMessage For="@(() => _model.Url)"></ValidationMessage>
            </label>
        </div>

        <div class="form-field">
            <label for="link-date">
                <span class="required-indicator">*</span>Date
                <div class="date-field">
                    <RadzenDatePicker @bind-Value=@_model.LinkDate Name="link-date" id="link-date" ShowCalendarWeek Kind="DateTimeKind.Unspecified" DateFormat="MM/dd/yyyy" />
                </div>
                <ValidationMessage For="@(() => _model.LinkDate)"></ValidationMessage>
            </label>
        </div>

        <div class="form-field">
            <label for="issue-number">
                <span class="required-indicator">*</span>Issue #
                <InputNumber id="issue-number" @bind-Value="@_model.ReadingLogIssueNumber" />
                <ValidationMessage For="@(() => _model.ReadingLogIssueNumber)"></ValidationMessage>
            </label>
        </div>

        <div class="form-field">
            <label for="link-type-id">
                <span class="required-indicator">*</span>Type
                <InputSelect type="text" id="link-type-id" @bind-Value="@_model.LinkTypeId">
                    <option value=""></option>
                    @foreach (var linkType in _linkTypes)
                    {
                        <option value="@linkType.LinkTypeId">@linkType.Name</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => _model.LinkTypeId)"></ValidationMessage>
            </label>
        </div>

        <div class="form-field">
            <label for="link-category-id">
                <span class="required-indicator">*</span>Category
                <InputSelect type="text" id="link-category-id" @bind-Value="@_model.LinkCategoryId">
                    <option value=""></option>
                    @foreach (var linkCategory in _linkCategories)
                    {
                        <option value="@linkCategory.LinkCategoryId">@linkCategory.Name</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => _model.LinkCategoryId)"></ValidationMessage>
            </label>
        </div>

        <div class="form-field form-actions">
            <button type="submit">Save</button>
            @if (Link is not null)
            {
                <a href="/links" class="button-ghost">Cancel</a>
            }
        </div>
    </fieldset>
</EditForm>

@code {
    private string _pageError = string.Empty;
    private bool _isProcessing;
    private EditContext? _editContext;
    private IReadOnlyCollection<LinkTypeApiModel> _linkTypes = [];
    private IReadOnlyCollection<LinkCategoryApiModel> _linkCategories = [];
    private SaveLink.Request _model = new();
    
    [Parameter] public LinkApiModel? Link { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var linkTypeResult = await Mediator.Send(new GetAllLinkTypes.Request());

        if (!linkTypeResult.IsSuccessful)
        {
            _pageError = linkTypeResult.ErrorMessage;
            return;
        }
        
        var linkCategoryResult = await Mediator.Send(new GetAllLinkCategories.Request());

        if (!linkCategoryResult.IsSuccessful)
        {
            _pageError = linkCategoryResult.ErrorMessage;
            return;
        }

        if (Link is not null)
        {
            _model = new()
            {   
                LinkId = Link.LinkId,
                Author = Link.Author,
                LinkCategoryId = Link.LinkCategoryId,
                LinkDate = Link.LinkDate,
                LinkTypeId = Link.LinkTypeId,
                ReadingLogIssueNumber = Link.ReadingLogIssueNumber,
                Title = Link.Title,
                Url = Link.Url,
            };
        }

        _editContext = new EditContext(_model);

        _linkTypes = linkTypeResult.Value ?? [];
        _linkCategories = linkCategoryResult.Value ?? [];
    }

    private async Task SubmitForm(EditContext editContext)
    {
        _isProcessing = true;
        
        if (!editContext.Validate())
        {
            _isProcessing = false;
            return;
        }

        var result = await Mediator.Send(_model);
        
        if (!result.IsSuccessful)
        {
            _pageError = result.ErrorMessage;
            _isProcessing = false;
            return;
        }
        
        NavManager.NavigateTo("/links", true);
    }
}