@using WagsMediaRepository.Domain
@using WagsMediaRepository.Web.Handlers.Commands.VideoGames
@using WagsMediaRepository.Web.Handlers.Queries.VideoGames

<EditForm EditContext="_editContext" OnSubmit="@SubmitForm" FormName="video-game-form">
    <DataAnnotationsValidator/>

    @if (!string.IsNullOrWhiteSpace(_pageError))
    {
        <div class="alert error">
            @_pageError
        </div>
    }
    <fieldset disabled="@_isProcessing" aria-busy="@_isProcessing">
        <div class="form-field">
            <label for="title">
                <span class="required-indicator">*</span>Title
                <InputText type="text" id="title" @bind-Value="@_model.Title" />
                <ValidationMessage For="@(() => _model.Title)"></ValidationMessage>
            </label>
        </div>

        <div class="form-field">
            <label for="status">
                <span class="required-indicator">*</span>Status
                <InputSelect type="text" id="status" @bind-Value="@_model.StatusId">
                    <option value=""></option>
                    <option value="@Constants.VideoGameStatus.ToPlay">To Play</option>
                    <option value="@Constants.VideoGameStatus.InProgress">In Progress</option>
                    <option value="@Constants.VideoGameStatus.Completed">Completed</option>
                </InputSelect>
                <ValidationMessage For="@(() => _model.StatusId)"></ValidationMessage>
            </label>
        </div>

        <div class="form-field">
            <label for="completion-status">
                <span class="required-indicator">*</span>Completion Status
                <InputSelect type="text" id="completion-status" @bind-Value="@_model.CompletionStatusId">
                    <option value=""></option>
                    <option value="@Constants.VideoGameCompletionStatus.NotApplicable">N/A</option>
                    <option value="@Constants.VideoGameCompletionStatus.No">No</option>
                    <option value="@Constants.VideoGameCompletionStatus.Yes">Yes</option>
                </InputSelect>
                <ValidationMessage For="@(() => _model.CompletionStatusId)"></ValidationMessage>
            </label>
        </div>

        <div class="form-field">
            <label for="link">
                <span class="required-indicator">*</span>Link
                <InputText type="text" id="link" @bind-Value="@_model.Link" />
                <ValidationMessage For="@(() => _model.Link)"></ValidationMessage>
            </label>
        </div>

        <div class="form-field">
            <label for="cover-image">
                <span class="required-indicator">*</span>Cover Image
                <InputText type="text" id="cover-image" @bind-Value="@_model.CoverImageUrl" />
                <ValidationMessage For="@(() => _model.CoverImageUrl)"></ValidationMessage>
            </label>
        </div>

        <div class="form-field">
            <label for="date-started">
                Date Started
                <div class="date-field">
                    <RadzenDatePicker @bind-Value=@_model.DateStarted Name="date-started" id="date-started" ShowCalendarWeek Kind="DateTimeKind.Unspecified" DateFormat="MM/dd/yyyy" />
                </div>
                <ValidationMessage For="@(() => _model.DateStarted)"></ValidationMessage>
            </label>
        </div>

        <div class="form-field">
            <label for="date-completed">
                Date Completed
                <div class="date-field">
                    <RadzenDatePicker @bind-Value=@_model.DateCompleted Name="date-completed" id="date-completed" ShowCalendarWeek Kind="DateTimeKind.Unspecified" DateFormat="MM/dd/yyyy" />
                </div>
                <ValidationMessage For="@(() => _model.DateCompleted)"></ValidationMessage>
            </label>
        </div>

        <div class="form-field">
            <label for="rating">
                Rating
                <InputNumber id="rating" @bind-Value="@_model.Rating" />
                <ValidationMessage For="@(() => _model.Rating)"></ValidationMessage>
            </label>
        </div>

        <div class="form-field">
            <label for="thoughts">
                Thoughts
                <InputTextArea id="thoughts" @bind-Value="@_model.Thoughts" />
                <ValidationMessage For="@(() => _model.Thoughts)"></ValidationMessage>
            </label>
        </div>

        <div class="form-field">
            <label for="sort-order">
                Sort Order
                <InputNumber id="sort-order" @bind-Value="@_model.SortOrder" />
                <ValidationMessage For="@(() => _model.SortOrder)"></ValidationMessage>
            </label>
        </div>

        <div class="form-field">
            <label for="systems">
                System(s)
                <select id="systems" @bind="@_model.SystemIds" multiple>
                    @foreach (var system in _videoGameSystems)
                    {
                    <option value="@system.VideoGameSystemId">@system.Name</option>
                    }
                </select>
                <ValidationMessage For="@(() => _model.SystemIds)"></ValidationMessage>
            </label>
        </div>

        <div class="form-field">
            <label for="genres">
                Genre(s)
                <select id="genres" @bind="@_model.GenreIds" multiple>
                    @foreach (var genre in _videoGameGenres)
                    {
                    <option value="@genre.VideoGameGenreId">@genre.Name</option>
                    }
                </select>
                <ValidationMessage For="@(() => _model.GenreIds)"></ValidationMessage>
            </label>
        </div>

        <div class="form-field form-actions">
            <button type="submit">Save</button>
            @if (VideoGame is not null)
            {
                <a href="/video-games" class="button-ghost">Cancel</a>
            }
        </div>
    </fieldset>
</EditForm>

@code {
    private string _pageError = string.Empty;
    private bool _isProcessing;
    private EditContext? _editContext;
    private SaveVideoGame.Request _model = new();
    
    private IReadOnlyCollection<VideoGameSystemApiModel> _videoGameSystems = [];
    private IReadOnlyCollection<VideoGameGenreApiModel> _videoGameGenres = [];
    
    [Parameter] public VideoGameApiModel? VideoGame { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        var videoGameGenreResult = await Mediator.Send(new GetAllVideoGameGenres.Request());

        if (!videoGameGenreResult.IsSuccessful)
        {
            _pageError = videoGameGenreResult.ErrorMessage;
            return;
        }
        
        var videoGameSystemResult = await Mediator.Send(new GetAllVideoGameSystems.Request());

        if (!videoGameSystemResult.IsSuccessful)
        {
            _pageError = videoGameSystemResult.ErrorMessage;
            return;
        }

        if (VideoGame is not null)
        {
            _model = SaveVideoGame.Request.FromApiModel(VideoGame);
        }

        _editContext = new EditContext(_model);

        _videoGameGenres = videoGameGenreResult.Value ?? [];
        _videoGameSystems = videoGameSystemResult.Value ?? [];
    }
    
    private async Task SubmitForm(EditContext editContext)
    {
        _isProcessing = true;
        
        if (!editContext.Validate())
        {
            _isProcessing = false;
            return;
        }

        var result = await Mediator.Send(_model);
        
        if (!result.IsSuccessful)
        {
            _pageError = result.ErrorMessage;
            _isProcessing = false;
            return;
        }
        
        NavManager.NavigateTo("/video-games", true);
    }
}