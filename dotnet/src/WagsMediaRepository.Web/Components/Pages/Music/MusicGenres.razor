@page "/music/genres"

@rendermode InteractiveServer

@using WagsMediaRepository.Web.Handlers.Commands.Music
@using WagsMediaRepository.Web.Handlers.Queries.Music

@inject IJSRuntime JSRuntime

<PageTitle>Music Genres - Wags Media Repository</PageTitle>

<main class="reference-page">
    <div class="table-title">
        <h1>Music Genres</h1>
        <div class="actions">
            <a href="/music/genres/add" class="button-primary">Add Genre</a>
        </div>
    </div>

    @if (!string.IsNullOrWhiteSpace(_pageError))
    {
        <div class="alert error">
            @_pageError
        </div>
    }

    <table class="data-table reference-table">
        <thead>
            <tr>
                <th class="name">Name</th>
                <th class="actions">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var genre in _genres)
            {
                <tr>
                    <td class="name">@genre.Name</td>
                    <td class="centered actions">
                        <a href="/music/genres/edit/@genre.MusicGenreId">Edit</a>
                        <button type="button" class="link-button" @onclick="@(() => DeleteGenre(genre))">Delete</button>
                    </td>
                </tr>
            }
            
            @if (_genres.Count == 0)
            {
                <tr>
                    <td colspan="2" class="centered no-data"><em>No Genres Available</em></td>
                </tr>
            }
        </tbody>
    </table>

    <div class="back-button">
        <a href="/music/">&larr; Back</a>
    </div>
</main>

@code {
    private string _pageError = string.Empty;
    private IReadOnlyCollection<MusicGenreApiModel> _genres = [];

    protected override async Task OnInitializedAsync()
    {
        await LoadGenres();
    }

    private async Task LoadGenres()
    {
        var result = await Mediator.Send(new GetAllMusicGenres.Request());

        if (result.IsSuccessful)
        {
            _genres = result.Value ?? [];
        }
        else
        {
            _pageError = result.ErrorMessage;
        }
    }

    private async Task DeleteGenre(MusicGenreApiModel genre)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the genre '{genre.Name}'?"))
            return;

        await Mediator.Send(new DeleteMusicGenre.Request(genre.MusicGenreId));

        await LoadGenres();
    }
}