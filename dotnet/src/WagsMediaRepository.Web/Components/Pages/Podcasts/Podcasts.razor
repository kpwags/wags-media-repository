@page "/podcasts"

@using WagsMediaRepository.Web.Handlers.Commands.Podcasts
@using WagsMediaRepository.Web.Handlers.Queries.Podcasts

@inject IJSRuntime JSRuntime

<PageTitle>Podcasts - Wags Media Repository</PageTitle>

<main class="podcasts-page">
    <div class="table-title">
        <h1>Podcasts</h1>
        <div class="actions">
            <a href="/podcasts/add" class="button-primary">Add Podcast</a>
            <a href="/podcasts/categories" class="button-primary">Manage Categories</a>
        </div>
    </div>

    @if (!string.IsNullOrWhiteSpace(_pageError))
    {
        <div class="alert error">
            @_pageError
        </div>
    }

    <table class="data-table podcasts-table">
        <thead>
        <tr>
            <th class="name">Name</th>
            <th class="category">Category</th>
            <th class="actions">Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var podcast in _podcasts)
        {
        <tr>
            <td><a href="@podcast.Link" target="_blank" rel="noreferrer nofollow">@podcast.Name</a></td>
            <td class="centered">
                <span class="tag" style="background-color:@podcast.Category.ColorCode;">@podcast.Category.Name</span>
            </td>
            <td class="centered actions">
                <a href="/podcasts/edit/@podcast.PodcastId">Edit</a>
                <button type="button" class="link-button" @onclick="@(() => DeletePodcast(podcast))">Delete</button>
            </td>
        </tr>
        }
        @if (_podcasts.Count == 0)
        {
            <tr>
                <td colspan="7" class="centered no-data"><em>No Podcasts Available</em></td>
            </tr>
        }
        </tbody>
    </table>
</main>

@code {
    private string _pageError = string.Empty;
    private IReadOnlyCollection<PodcastApiModel> _podcasts = [];

    protected override async Task OnInitializedAsync()
    {
        await LoadPodcasts();
    }

    private async Task LoadPodcasts()
    {
        var result = await Mediator.Send(new GetAllPodcasts.Request());

        if (!result.IsSuccessful)
        {
            _pageError = result.ErrorMessage;
            return;
        }

        _podcasts = result.Value ?? [];
    }

    private async Task DeletePodcast(PodcastApiModel podcast)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the podcast '{podcast.Name}'?"))
            return;

        await Mediator.Send(new DeletePodcast.Request(podcast.PodcastId));

        await LoadPodcasts();
    }
}