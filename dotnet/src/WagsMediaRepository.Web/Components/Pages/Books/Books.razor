@page "/books"

@rendermode InteractiveServer

@using WagsMediaRepository.Domain
@using WagsMediaRepository.Infrastructure.Helpers
@using WagsMediaRepository.Web.Components.Books
@using WagsMediaRepository.Web.Handlers.Commands.Books
@using WagsMediaRepository.Web.Handlers.Queries.Books

@inject IJSRuntime JSRuntime

<PageTitle>Books - Wags Media Repository</PageTitle>

<main class="books-page">
    <div class="table-title">
        <h1>Books</h1>
        <div class="actions">
            <a href="/books/add/" class="button-primary">Add Book</a>
            <a href="/books/genres/" class="button-primary">Manage Genres</a>
            <a href="/books/series/" class="button-primary">Manage Series</a>
        </div>
    </div>

    @if (!string.IsNullOrWhiteSpace(_pageError))
    {
        <div class="alert error">
            @_pageError
        </div>
    }
    
    <RadzenTabs RenderMode="TabRenderMode.Client" @bind-SelectedIndex="@_selectedTabIndex">
        <Tabs>
            <RadzenTabsItem Text="Currently Reading">
                <CurrentlyReading Books="_currentlyReading" OnDelete="DeleteBook" />
            </RadzenTabsItem>
            <RadzenTabsItem Text="To Read">
                <ToRead Books="_toRead" OnDelete="DeleteBook" />
            </RadzenTabsItem>
            <RadzenTabsItem Text="Finished Reading">
                <FinishedReading Books="_completed" OnDelete="DeleteBook" />
            </RadzenTabsItem>
            <RadzenTabsItem Text="Abandoned">
                <Abandoned Books="_abandoned" OnDelete="DeleteBook" />
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>
</main>

@code {
    private int _selectedTabIndex = 0;
    private string _pageError = string.Empty;
    private IReadOnlyCollection<BookApiModel> _books = [];
    private IReadOnlyCollection<BookApiModel> _toRead = [];
    private IReadOnlyCollection<BookApiModel> _currentlyReading = [];
    private IReadOnlyCollection<BookApiModel> _completed = [];
    private IReadOnlyCollection<BookApiModel> _abandoned = [];

    protected override async Task OnInitializedAsync()
    {
        await LoadBooks();
    }
    
    private async Task LoadBooks()
    {
        _pageError = "";
        
        var result = await Mediator.Send(new GetAllBooks.Request());

        if (!result.IsSuccessful)
        {
            _pageError = result.ErrorMessage;
            return;
        }
        
        _books = result.Value ?? [];
        
        _toRead = _books
            .Where(b => b.BookStatusId == (int)Constants.BookStatus.ToRead)
            .OrderBy(b => b.SortOrder ?? int.MaxValue)
            .ThenBy(b => Sorters.SortByTitle(b.Title))
            .ToList();
        
        _currentlyReading = _books
            .Where(b => b.BookStatusId == (int)Constants.BookStatus.Reading)
            .OrderBy(b => Sorters.SortByTitle(b.Title))
            .ToList();
        
        _completed = _books
            .Where(b => b.BookStatusId == (int)Constants.BookStatus.Finished)
            .OrderByDescending(b => b.DateCompleted)
            .ToList();
        
        _abandoned = _books
            .Where(b => b.BookStatusId == (int)Constants.BookStatus.Abandoned)
            .OrderBy(b => Sorters.SortByTitle(b.Title))
            .ToList();
    }
    
    private async Task DeleteBook(int bookId)
    {
        _pageError = "";
        
        var result = await Mediator.Send(new DeleteBook.Request(bookId));

        if (!result.IsSuccessful)
        {
            _pageError = result.ErrorMessage;
            return;
        }

        await LoadBooks();
    }
    
    private async Task DeleteBook(BookApiModel book)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the book '{book.Title}'?"))
            return;

        await DeleteBook(book.BookId);
    }
}