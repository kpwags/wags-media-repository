// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WagsMediaRepository.Infrastructure.Database;

#nullable disable

namespace WagsMediaRepository.Web.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("application")
                .HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.BookDto", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BookNotesUrl")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<int?>("BookSeriesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CoverImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("CurrentPage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(1);

                    b.Property<DateTime?>("DateCompleted")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateStarted")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAtLibrary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("PageCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<int?>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SubTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Thoughts")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("Title")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.HasKey("BookId")
                        .HasName("PK_Book_Book");

                    b.HasIndex("BookSeriesId");

                    b.HasIndex("BookStatusId");

                    b.HasIndex("BookTypeId");

                    b.ToTable("Book", "book");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.BookFormatDto", b =>
                {
                    b.Property<int>("BookFormatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.HasKey("BookFormatId")
                        .HasName("PK_Book_BookFormat");

                    b.ToTable("BookFormat", "book");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.BookGenreDto", b =>
                {
                    b.Property<int>("BookGenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.HasKey("BookGenreId")
                        .HasName("PK_Book_BookGenre");

                    b.ToTable("BookGenre", "book");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.BookSeriesDto", b =>
                {
                    b.Property<int>("BookSeriesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.HasKey("BookSeriesId")
                        .HasName("PK_Book_BookSeries");

                    b.ToTable("BookSeries", "book");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.BookStatusDto", b =>
                {
                    b.Property<int>("BookStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.HasKey("BookStatusId")
                        .HasName("PK_Book_BookStatus");

                    b.ToTable("BookStatus", "book");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.BookToBookFormatDto", b =>
                {
                    b.Property<int>("BookToBookFormatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookFormatId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BookToBookFormatId")
                        .HasName("PK_Book_BookToBookFormat");

                    b.HasIndex("BookFormatId");

                    b.HasIndex("BookId", "BookFormatId")
                        .IsUnique()
                        .HasDatabaseName("UQ_Book_BookToBookFormat_BookId_BookFormatId");

                    b.ToTable("BookToBookFormat", "book");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.BookToBookGenreDto", b =>
                {
                    b.Property<int>("BookToBookGenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookGenreId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BookToBookGenreId")
                        .HasName("PK_Book_BookToBookGenre");

                    b.HasIndex("BookGenreId");

                    b.HasIndex("BookId", "BookGenreId")
                        .IsUnique()
                        .HasDatabaseName("UQ_Book_BookToBookGenre_BookId_BookGenreId");

                    b.ToTable("BookToBookGenre", "book");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.BookTypeDto", b =>
                {
                    b.Property<int>("BookTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("BookTypeId")
                        .HasName("PK_Book_BookType");

                    b.ToTable("BookType", "book");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.LinkCategoryDto", b =>
                {
                    b.Property<int>("LinkCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.HasKey("LinkCategoryId")
                        .HasName("PK_Link_LinkCategory");

                    b.ToTable("LinkCategory", "link");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.LinkDto", b =>
                {
                    b.Property<int>("LinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("LinkCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LinkDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("LinkTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReadingLogIssueNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("LinkId")
                        .HasName("PK_Link_Link");

                    b.HasIndex("LinkCategoryId");

                    b.HasIndex("LinkTypeId");

                    b.ToTable("Link", "link");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.LinkTypeDto", b =>
                {
                    b.Property<int>("LinkTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.HasKey("LinkTypeId")
                        .HasName("PK_Link_LinkType");

                    b.ToTable("LinkType", "link");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.MovieDto", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DateWatched")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImdbLink")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("MovieStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PosterImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<int?>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Thoughts")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("MovieId")
                        .HasName("PK_Movie_Movie");

                    b.HasIndex("MovieStatusId");

                    b.ToTable("Movie", "movie");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.MovieGenreDto", b =>
                {
                    b.Property<int>("MovieGenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.HasKey("MovieGenreId")
                        .HasName("PK_Movie_MovieGenre");

                    b.ToTable("MovieGenre", "movie");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.MovieServiceDto", b =>
                {
                    b.Property<int>("MovieServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.HasKey("MovieServiceId")
                        .HasName("PK_Movie_MovieService");

                    b.ToTable("MovieService", "movie");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.MovieStatusDto", b =>
                {
                    b.Property<int>("MovieStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.HasKey("MovieStatusId")
                        .HasName("PK_Movie_MovieStatus");

                    b.ToTable("MovieStatus", "movie");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.MovieToMovieGenreDto", b =>
                {
                    b.Property<int>("MovieToMovieGenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MovieGenreId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MovieId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MovieToMovieGenreId")
                        .HasName("PK_Movie_MovieToMovieGenre");

                    b.HasIndex("MovieGenreId");

                    b.HasIndex("MovieId", "MovieGenreId")
                        .IsUnique()
                        .HasDatabaseName("UQ_Movie_MovieToMovieGenre_MovieId_MovieGenreId");

                    b.ToTable("MovieToMovieGenre", "movie");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.MovieToMovieServiceDto", b =>
                {
                    b.Property<int>("MovieToMovieServicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MovieId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MovieServiceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MovieToMovieServicId")
                        .HasName("PK_Movie_MovieToMovieService");

                    b.HasIndex("MovieServiceId");

                    b.HasIndex("MovieId", "MovieServiceId")
                        .IsUnique()
                        .HasDatabaseName("UQ_Movie_MovieToMovieService_MovieId_MovieServiceId");

                    b.ToTable("MovieToMovieService", "movie");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.MusicAlbumDto", b =>
                {
                    b.Property<int>("MusicAlbumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Artist")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("CoverImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsTopTen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Thoughts")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.HasKey("MusicAlbumId")
                        .HasName("PK_Music_MusicAlbum");

                    b.ToTable("MusicAlbum", "music");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.MusicAlbumToMusicFormatDto", b =>
                {
                    b.Property<int>("MusicAlbumToMusicFormatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MusicAlbumId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MusicFormatId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MusicAlbumToMusicFormatId")
                        .HasName("PK_Music_MusicAlbumToMusicFormat");

                    b.HasIndex("MusicFormatId");

                    b.HasIndex("MusicAlbumId", "MusicFormatId")
                        .IsUnique()
                        .HasDatabaseName("UQ_Music_MusicAlbumToMusicFormat_MusicAlbumId_MusicFormatId");

                    b.ToTable("MusicAlbumToMusicFormat", "music");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.MusicAlbumToMusicGenreDto", b =>
                {
                    b.Property<int>("MusicAlbumToMusicGenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MusicAlbumId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MusicGenreId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MusicAlbumToMusicGenreId")
                        .HasName("PK_Music_MusicAlbumToMusicGenre");

                    b.HasIndex("MusicGenreId");

                    b.HasIndex("MusicAlbumId", "MusicGenreId")
                        .IsUnique()
                        .HasDatabaseName("UQ_Music_MusicAlbumToMusicGenre_MusicAlbumId_MusicGenreId");

                    b.ToTable("MusicAlbumToMusicGenre", "music");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.MusicAlbumTrackDto", b =>
                {
                    b.Property<int>("MusicAlbumTrackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MusicAlbumId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<int>("TrackNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("MusicAlbumTrackId")
                        .HasName("PK_Music_MusicAlbumTrack");

                    b.HasIndex("MusicAlbumId");

                    b.ToTable("MusicAlbumTrack", "music");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.MusicFormatDto", b =>
                {
                    b.Property<int>("MusicFormatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.HasKey("MusicFormatId")
                        .HasName("PK_Music_MusicFormat");

                    b.ToTable("MusicFormat", "music");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.MusicGenreDto", b =>
                {
                    b.Property<int>("MusicGenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.HasKey("MusicGenreId")
                        .HasName("PK_Music_Genre");

                    b.ToTable("MusicGenre", "music");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.PodcastCategoryDto", b =>
                {
                    b.Property<int>("PodcastCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.HasKey("PodcastCategoryId")
                        .HasName("PK_Podcast_PodcastCategory");

                    b.ToTable("PodcastCategory", "podcast");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.PodcastDto", b =>
                {
                    b.Property<int>("PodcastId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CoverImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<int>("PodcastCategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PodcastId")
                        .HasName("PK_Podcast_Podcast");

                    b.HasIndex("PodcastCategoryId");

                    b.ToTable("Podcast", "podcast");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.TelevisionGenreDto", b =>
                {
                    b.Property<int>("TelevisionGenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.HasKey("TelevisionGenreId")
                        .HasName("PK_Tv_TelevisionGenre");

                    b.ToTable("TelevisionGenre", "tv");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.TelevisionServiceDto", b =>
                {
                    b.Property<int>("TelevisionServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.HasKey("TelevisionServiceId")
                        .HasName("PK_Tv_TelevisionService");

                    b.ToTable("TelevisionService", "tv");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.TelevisionShowDto", b =>
                {
                    b.Property<int>("TelevisionShowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CoverImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("CurrentSeason")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<string>("ImdbLink")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberOfSeasons")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<int?>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TelevisionStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Thoughts")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("TelevisionShowId")
                        .HasName("PK_Tv_TelevisionShow");

                    b.HasIndex("TelevisionStatusId");

                    b.ToTable("TelevisionShow", "tv");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.TelevisionShowToTelevisionGenreDto", b =>
                {
                    b.Property<int>("TelevisionShowToTelevisionGenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("TelevisionGenreId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TelevisionShowId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TelevisionShowToTelevisionGenreId")
                        .HasName("PK_Tv_TelevisionShowToTelevisionGenre");

                    b.HasIndex("TelevisionGenreId");

                    b.HasIndex("TelevisionShowId", "TelevisionGenreId")
                        .IsUnique()
                        .HasDatabaseName("UQ_Tv_TelevisionShowToTelevisionGenre_TelevisionShowId_TelevisionGenreId");

                    b.ToTable("TelevisionShowToTelevisionGenre", "tv");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.TelevisionShowToTelevisionServiceDto", b =>
                {
                    b.Property<int>("TelevisionShowToTelevisionServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("TelevisionServiceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TelevisionShowId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TelevisionShowToTelevisionServiceId")
                        .HasName("PK_Tv_TelevisionShowToTelevisionService");

                    b.HasIndex("TelevisionServiceId");

                    b.HasIndex("TelevisionShowId", "TelevisionServiceId")
                        .IsUnique()
                        .HasDatabaseName("UQ_Music_TelevisionShowToTelevisionService_TelevisionShowId_TelevisionServiceId");

                    b.ToTable("TelevisionShowToTelevisionService", "tv");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.TelevisionStatusDto", b =>
                {
                    b.Property<int>("TelevisionStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.HasKey("TelevisionStatusId")
                        .HasName("PK_Tv_TelevisionStatus");

                    b.ToTable("TelevisionStatus", "tv");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.VideoGameCompletionDto", b =>
                {
                    b.Property<int>("VideoGameCompletionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.HasKey("VideoGameCompletionId")
                        .HasName("PK_Videogame_VideoGameCompletion");

                    b.ToTable("VideoGameCompletion", "videogame");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.VideoGameDto", b =>
                {
                    b.Property<int>("VideoGameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CoverImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateCompleted")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateStarted")
                        .HasColumnType("TEXT");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<int?>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Thoughts")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("VideoGameCompletionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VideoGameStatusId")
                        .HasColumnType("INTEGER");

                    b.HasKey("VideoGameId")
                        .HasName("PK_Videogame_VideoGme");

                    b.HasIndex("VideoGameCompletionId");

                    b.HasIndex("VideoGameStatusId");

                    b.ToTable("VideoGame", "videogame");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.VideoGameGenreDto", b =>
                {
                    b.Property<int>("VideoGameGenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.HasKey("VideoGameGenreId")
                        .HasName("PK_Videogame_VideoGameGenre");

                    b.ToTable("VideoGameGenre", "videogame");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.VideoGameStatusDto", b =>
                {
                    b.Property<int>("VideoGameStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.HasKey("VideoGameStatusId")
                        .HasName("PK_Videogame_VideoGameStatus");

                    b.ToTable("VideoGameStatus", "videogame");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.VideoGameSystemDto", b =>
                {
                    b.Property<int>("VideoGameSystemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.HasKey("VideoGameSystemId")
                        .HasName("PK_Videogame_VideoGameSystem");

                    b.ToTable("VideoGameSystem", "videogame");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.VideoGameToVideoGameGenreDto", b =>
                {
                    b.Property<int>("VideoGameToVideoGameGenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("VideoGameGenreId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VideoGameId")
                        .HasColumnType("INTEGER");

                    b.HasKey("VideoGameToVideoGameGenreId")
                        .HasName("PK_Videogame_VideoGameToVideoGameGenre");

                    b.HasIndex("VideoGameGenreId");

                    b.HasIndex("VideoGameId", "VideoGameGenreId")
                        .IsUnique()
                        .HasDatabaseName("UQ_Videogame_VideoGameToVideoGameGenre_VideoGameId_VideoGameGenreId");

                    b.ToTable("VideoGameToVideoGameGenre", "videogame");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.VideoGameToVideoGameSystemDto", b =>
                {
                    b.Property<int>("VideoGameToVideoGameSystemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("VideoGameId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VideoGameSystemId")
                        .HasColumnType("INTEGER");

                    b.HasKey("VideoGameToVideoGameSystemId")
                        .HasName("PK_Videogame_VideoGameToVideoGameSystem");

                    b.HasIndex("VideoGameSystemId");

                    b.HasIndex("VideoGameId", "VideoGameSystemId")
                        .IsUnique()
                        .HasDatabaseName("UQ_Videogame_VideoGameToVideoGameSystem_VideoGameId_VideoGameSystemId");

                    b.ToTable("VideoGameToVideoGameSystem", "videogame");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.BookDto", b =>
                {
                    b.HasOne("WagsMediaRepository.Domain.Dtos.BookSeriesDto", "BookSeries")
                        .WithMany("Books")
                        .HasForeignKey("BookSeriesId");

                    b.HasOne("WagsMediaRepository.Domain.Dtos.BookStatusDto", "BookStatus")
                        .WithMany("Books")
                        .HasForeignKey("BookStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WagsMediaRepository.Domain.Dtos.BookTypeDto", "BookType")
                        .WithMany("Books")
                        .HasForeignKey("BookTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookSeries");

                    b.Navigation("BookStatus");

                    b.Navigation("BookType");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.BookToBookFormatDto", b =>
                {
                    b.HasOne("WagsMediaRepository.Domain.Dtos.BookFormatDto", "BookFormat")
                        .WithMany("BookToBookFormats")
                        .HasForeignKey("BookFormatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WagsMediaRepository.Domain.Dtos.BookDto", "Book")
                        .WithMany("BookToBookFormats")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("BookFormat");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.BookToBookGenreDto", b =>
                {
                    b.HasOne("WagsMediaRepository.Domain.Dtos.BookGenreDto", "BookGenre")
                        .WithMany("BookToBookGenres")
                        .HasForeignKey("BookGenreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WagsMediaRepository.Domain.Dtos.BookDto", "Book")
                        .WithMany("BookToBookGenres")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("BookGenre");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.LinkDto", b =>
                {
                    b.HasOne("WagsMediaRepository.Domain.Dtos.LinkCategoryDto", "LinkCategory")
                        .WithMany("Links")
                        .HasForeignKey("LinkCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WagsMediaRepository.Domain.Dtos.LinkTypeDto", "LinkType")
                        .WithMany("Links")
                        .HasForeignKey("LinkTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LinkCategory");

                    b.Navigation("LinkType");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.MovieDto", b =>
                {
                    b.HasOne("WagsMediaRepository.Domain.Dtos.MovieStatusDto", "MovieStatus")
                        .WithMany("Movies")
                        .HasForeignKey("MovieStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MovieStatus");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.MovieToMovieGenreDto", b =>
                {
                    b.HasOne("WagsMediaRepository.Domain.Dtos.MovieGenreDto", "MovieGenre")
                        .WithMany("MovieToMovieGenres")
                        .HasForeignKey("MovieGenreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WagsMediaRepository.Domain.Dtos.MovieDto", "Movie")
                        .WithMany("MovieToMovieGenres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("MovieGenre");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.MovieToMovieServiceDto", b =>
                {
                    b.HasOne("WagsMediaRepository.Domain.Dtos.MovieDto", "Movie")
                        .WithMany("MovieToMovieServices")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WagsMediaRepository.Domain.Dtos.MovieServiceDto", "MovieService")
                        .WithMany("MovieToMovieService")
                        .HasForeignKey("MovieServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("MovieService");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.MusicAlbumToMusicFormatDto", b =>
                {
                    b.HasOne("WagsMediaRepository.Domain.Dtos.MusicAlbumDto", "MusicAlbum")
                        .WithMany("MusicAlbumToMusicFormats")
                        .HasForeignKey("MusicAlbumId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WagsMediaRepository.Domain.Dtos.MusicFormatDto", "MusicFormat")
                        .WithMany("MusicAlbumToMusicFormats")
                        .HasForeignKey("MusicFormatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MusicAlbum");

                    b.Navigation("MusicFormat");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.MusicAlbumToMusicGenreDto", b =>
                {
                    b.HasOne("WagsMediaRepository.Domain.Dtos.MusicAlbumDto", "MusicAlbum")
                        .WithMany("MusicAlbumToMusicGenres")
                        .HasForeignKey("MusicAlbumId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WagsMediaRepository.Domain.Dtos.MusicGenreDto", "MusicGenre")
                        .WithMany("MusicAlbumToMusicGenres")
                        .HasForeignKey("MusicGenreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MusicAlbum");

                    b.Navigation("MusicGenre");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.MusicAlbumTrackDto", b =>
                {
                    b.HasOne("WagsMediaRepository.Domain.Dtos.MusicAlbumDto", "MusicAlbum")
                        .WithMany("MusicAlbumTracks")
                        .HasForeignKey("MusicAlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MusicAlbum");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.PodcastDto", b =>
                {
                    b.HasOne("WagsMediaRepository.Domain.Dtos.PodcastCategoryDto", "PodcastCategory")
                        .WithMany("Podcasts")
                        .HasForeignKey("PodcastCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PodcastCategory");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.TelevisionShowDto", b =>
                {
                    b.HasOne("WagsMediaRepository.Domain.Dtos.TelevisionStatusDto", "TelevisionStatus")
                        .WithMany("TelevisionShows")
                        .HasForeignKey("TelevisionStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TelevisionStatus");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.TelevisionShowToTelevisionGenreDto", b =>
                {
                    b.HasOne("WagsMediaRepository.Domain.Dtos.TelevisionGenreDto", "TelevisionGenre")
                        .WithMany("TelevisionShowToTelevisionGenres")
                        .HasForeignKey("TelevisionGenreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WagsMediaRepository.Domain.Dtos.TelevisionShowDto", "TelevisionShow")
                        .WithMany("TelevisionToTelevisionGenres")
                        .HasForeignKey("TelevisionShowId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TelevisionGenre");

                    b.Navigation("TelevisionShow");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.TelevisionShowToTelevisionServiceDto", b =>
                {
                    b.HasOne("WagsMediaRepository.Domain.Dtos.TelevisionServiceDto", "TelevisionService")
                        .WithMany("TelevisionShowToTelevisionServices")
                        .HasForeignKey("TelevisionServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WagsMediaRepository.Domain.Dtos.TelevisionShowDto", "TelevisionShow")
                        .WithMany("TelevisionToTelevisionServices")
                        .HasForeignKey("TelevisionShowId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TelevisionService");

                    b.Navigation("TelevisionShow");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.VideoGameDto", b =>
                {
                    b.HasOne("WagsMediaRepository.Domain.Dtos.VideoGameCompletionDto", "VideoGameCompletion")
                        .WithMany("VideoGames")
                        .HasForeignKey("VideoGameCompletionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WagsMediaRepository.Domain.Dtos.VideoGameStatusDto", "VideoGameStatus")
                        .WithMany("VideoGames")
                        .HasForeignKey("VideoGameStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VideoGameCompletion");

                    b.Navigation("VideoGameStatus");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.VideoGameToVideoGameGenreDto", b =>
                {
                    b.HasOne("WagsMediaRepository.Domain.Dtos.VideoGameGenreDto", "VideoGameGenre")
                        .WithMany("VideoGameToVideoGameGenres")
                        .HasForeignKey("VideoGameGenreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WagsMediaRepository.Domain.Dtos.VideoGameDto", "VideoGame")
                        .WithMany("VideoGameToVideoGameGenres")
                        .HasForeignKey("VideoGameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("VideoGame");

                    b.Navigation("VideoGameGenre");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.VideoGameToVideoGameSystemDto", b =>
                {
                    b.HasOne("WagsMediaRepository.Domain.Dtos.VideoGameDto", "VideoGame")
                        .WithMany("VideoGameToVideoGameSystems")
                        .HasForeignKey("VideoGameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WagsMediaRepository.Domain.Dtos.VideoGameSystemDto", "VideoGameSystem")
                        .WithMany("VideoGameToVideoGameSystems")
                        .HasForeignKey("VideoGameSystemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("VideoGame");

                    b.Navigation("VideoGameSystem");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.BookDto", b =>
                {
                    b.Navigation("BookToBookFormats");

                    b.Navigation("BookToBookGenres");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.BookFormatDto", b =>
                {
                    b.Navigation("BookToBookFormats");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.BookGenreDto", b =>
                {
                    b.Navigation("BookToBookGenres");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.BookSeriesDto", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.BookStatusDto", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.BookTypeDto", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.LinkCategoryDto", b =>
                {
                    b.Navigation("Links");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.LinkTypeDto", b =>
                {
                    b.Navigation("Links");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.MovieDto", b =>
                {
                    b.Navigation("MovieToMovieGenres");

                    b.Navigation("MovieToMovieServices");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.MovieGenreDto", b =>
                {
                    b.Navigation("MovieToMovieGenres");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.MovieServiceDto", b =>
                {
                    b.Navigation("MovieToMovieService");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.MovieStatusDto", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.MusicAlbumDto", b =>
                {
                    b.Navigation("MusicAlbumToMusicFormats");

                    b.Navigation("MusicAlbumToMusicGenres");

                    b.Navigation("MusicAlbumTracks");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.MusicFormatDto", b =>
                {
                    b.Navigation("MusicAlbumToMusicFormats");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.MusicGenreDto", b =>
                {
                    b.Navigation("MusicAlbumToMusicGenres");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.PodcastCategoryDto", b =>
                {
                    b.Navigation("Podcasts");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.TelevisionGenreDto", b =>
                {
                    b.Navigation("TelevisionShowToTelevisionGenres");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.TelevisionServiceDto", b =>
                {
                    b.Navigation("TelevisionShowToTelevisionServices");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.TelevisionShowDto", b =>
                {
                    b.Navigation("TelevisionToTelevisionGenres");

                    b.Navigation("TelevisionToTelevisionServices");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.TelevisionStatusDto", b =>
                {
                    b.Navigation("TelevisionShows");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.VideoGameCompletionDto", b =>
                {
                    b.Navigation("VideoGames");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.VideoGameDto", b =>
                {
                    b.Navigation("VideoGameToVideoGameGenres");

                    b.Navigation("VideoGameToVideoGameSystems");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.VideoGameGenreDto", b =>
                {
                    b.Navigation("VideoGameToVideoGameGenres");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.VideoGameStatusDto", b =>
                {
                    b.Navigation("VideoGames");
                });

            modelBuilder.Entity("WagsMediaRepository.Domain.Dtos.VideoGameSystemDto", b =>
                {
                    b.Navigation("VideoGameToVideoGameSystems");
                });
#pragma warning restore 612, 618
        }
    }
}
