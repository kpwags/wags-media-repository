<table class="data-table books-table to-read">
    <thead>
    <tr>
        <th class="sort">&nbsp;</th>
        <th class="title">Title</th>
        <th class="author">Author</th>
        <th class="type">Type</th>
        <th class="series">Series</th>
        <th class="actions">Actions</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var book in Books)
    {
        <tr>
            <td class="centered">@book.SortOrder</td>
            <td>@book.FullTitle</td>
            <td>@book.Author</td>
            <td>
                <div class="tag-cell centered">
                    <span class="tag" style="background-color:@book.Type.ColorCode;">@book.Type.Name</span>
                </div>
            </td>
            <td>
                @if (book.Series is not null)
                {
                    <div class="tag-cell centered">
                        <span class="tag" style="background-color:@book.Series.ColorCode;">@book.Series.Name</span>
                    </div>
                }
                else
                {
                    <span></span>
                }
            </td>
            <td class="centered actions">
                <a href="/books/edit/@book.BookId">Edit</a>
                <button type="button" class="link-button" @onclick="@(_ => DeleteBook(book))">Delete</button>
            </td>
        </tr>
    }
    @if (Books.Count == 0)
    {
        <tr>
            <td colspan="6" class="centered no-data"><em>No Books To Read</em></td>
        </tr>
    }
    </tbody>
</table>

@code {
[Parameter, EditorRequired] public IReadOnlyCollection<BookApiModel> Books { get; set; } = [];

[Parameter, EditorRequired] public EventCallback<BookApiModel> OnDelete { get; set; }

private async Task DeleteBook(BookApiModel book) => await OnDelete.InvokeAsync(book);
}