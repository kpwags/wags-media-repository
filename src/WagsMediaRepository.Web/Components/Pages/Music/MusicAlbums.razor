@page "/music"

@using WagsMediaRepository.Web.Handlers.Commands.Music
@using WagsMediaRepository.Web.Handlers.Queries.Music

@inject IJSRuntime JSRuntime

<PageTitle>Music - Wags Media Repository</PageTitle>

<main class="music-page">
    <div class="table-title">
        <h1>Music</h1>
        <div class="actions">
            <a href="/music/add" class="button-primary">Add Album</a>
            <a href="/music/genres" class="button-primary">Manage Genres</a>
        </div>
    </div>

    @if (!string.IsNullOrWhiteSpace(_pageError))
    {
        <div class="alert error">
            @_pageError
        </div>
    }

    <table class="data-table music-table">
        <thead>
            <tr>
                <th class="artist">Artist</th>
                <th class="title">Title</th>
                <th class="actions">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var album in _albums)
            {
                <tr>
                    <td>@album.Artist</td>
                    <td>@album.Title</td>
                    <td class="centered actions">
                        <a href="/music/edit/@album.MusicAlbumId">Edit</a>
                        <a href="/music/tracks/@album.MusicAlbumId">Tracks</a>
                        <button type="button" class="link-button" @onclick="@(() => DeleteAlbum(album))">Delete</button>
                    </td>
                </tr>
            }
            
            @if (_albums.Count == 0)
            {
                <tr>
                    <td colspan="3" class="centered no-data"><em>No Albums Available</em></td>
                </tr>
            }
        </tbody>
    </table>
</main>

@code {
    private string _pageError = string.Empty;
    private IReadOnlyCollection<MusicAlbumApiModel> _albums = [];

    protected override async Task OnInitializedAsync()
    {
        await LoadAlbums();
    }

    private async Task LoadAlbums()
    {
        var result = await Mediator.Send(new GetAllMusicAlbums.Request());

        if (!result.IsSuccessful)
        {
            _pageError = result.ErrorMessage;
            return;
        }

        _albums = result.Value ?? [];
    }

    private async Task DeleteAlbum(MusicAlbumApiModel album)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the album '{album.Title}'?"))
            return;

        await Mediator.Send(new DeleteAlbum.Request(album.MusicAlbumId));

        await LoadAlbums();
    }
}