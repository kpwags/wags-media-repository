@page "/video-games"

@rendermode InteractiveServer

@using WagsMediaRepository.Web.Components.VideoGames
@using WagsMediaRepository.Domain
@using WagsMediaRepository.Web.Handlers.Commands.VideoGames
@using WagsMediaRepository.Web.Handlers.Queries.VideoGames

@inject IJSRuntime JSRuntime

<PageTitle>Video Games - Wags Media Repository</PageTitle>

<main class="video-games-page">
    <div class="table-title">
        <h1>Video Games</h1>
        <div class="actions">
            <a href="/video-games/add" class="button-primary">Add Game</a>
            <a href="/video-games/genres" class="button-primary">Manage Genres</a>
            <a href="/video-games/systems" class="button-primary">Manage Systems</a>
        </div>
    </div>

    @if (!string.IsNullOrWhiteSpace(_pageError))
    {
        <div class="alert error">
            @_pageError
        </div>
    }
    
    <InProgressTable VideoGames="_inProgressVideoGames" OnDelete="DeleteVideoGame" />

    <ToPlayTable VideoGames="_toPlayVideoGames" OnDelete="DeleteVideoGame" />

    <CompletedTable VideoGames="_completedVideoGames" OnDelete="DeleteVideoGame" />
</main>

@code {
    private string _pageError = string.Empty;
    private IReadOnlyCollection<VideoGameApiModel> _videoGames = [];
    private IReadOnlyCollection<VideoGameApiModel> _inProgressVideoGames = [];
    private IReadOnlyCollection<VideoGameApiModel> _toPlayVideoGames = [];
    private IReadOnlyCollection<VideoGameApiModel> _completedVideoGames = [];

    protected override async Task OnInitializedAsync()
    {
        await LoadVideoGames();
    }

    private async Task LoadVideoGames()
    {
        _pageError = "";
        
        var result = await Mediator.Send(new GetAllVideoGames.Request());

        if (!result.IsSuccessful)
        {
            _pageError = result.ErrorMessage;
            return;
        }

        if (result.IsSuccessful)
        {
            _videoGames = result.Value ?? [];
            
            _inProgressVideoGames = _videoGames
                .Where(v => v.Status == Constants.VideoGameStatus.InProgress)
                .OrderBy(v => v.SortOrder)
                .ToList();
            
            _toPlayVideoGames = _videoGames
                .Where(v => v.Status == Constants.VideoGameStatus.ToPlay)
                .OrderBy(v => v.SortOrder ?? int.MaxValue)
                .ToList();
            
            _completedVideoGames = _videoGames
                .Where(v => v.Status == Constants.VideoGameStatus.Completed)
                .OrderByDescending(v => v.DateCompleted)
                .ThenBy(v => v.SortOrder)
                .ToList();
        }
    }

    private async Task DeleteVideoGame(int videoGameId)
    {
        _pageError = "";
        
        var result = await Mediator.Send(new DeleteVideoGame.Request(videoGameId));

        if (!result.IsSuccessful)
        {
            _pageError = result.ErrorMessage;
            return;
        }

        await LoadVideoGames();
    }
    
    private async Task DeleteVideoGame(VideoGameApiModel videoGame)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the game '{videoGame.Title}'?"))
            return;

        await DeleteVideoGame(videoGame.VideoGameId);
    }
}