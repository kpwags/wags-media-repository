@page "/video-games/systems"

@rendermode InteractiveServer

@using WagsMediaRepository.Web.Handlers.Commands.VideoGames
@using WagsMediaRepository.Web.Handlers.Queries.VideoGames

@inject IJSRuntime JSRuntime

<PageTitle>Video Game Systems - Wags Media Repository</PageTitle>

<main class="video-games-systems-page">
    <div class="table-title">
        <h1>Video Game Systems</h1>
        <div class="actions">
            <a href="/video-games/systems/add" class="button-primary">Add System</a>
        </div>
    </div>

    @if (!string.IsNullOrWhiteSpace(_pageError))
    {
    <div class="alert error">
        @_pageError
    </div>
    }

    <table class="data-table video-games-systems-table">
        <thead>
        <tr>
            <th class="name">Name</th>
            <th class="actions">Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var videoGameSystem in _videoGameSystems)
        {
            <tr>
                <td class="name">@videoGameSystem.Name</td>
                <td class="centered actions">
                    <a href="/video-games/systems/edit/@videoGameSystem.VideoGameSystemId">Edit</a>
                    <button type="button" class="link-button" @onclick="@(() => DeleteVideoGameSystem(videoGameSystem))">Delete</button>
                </td>
            </tr>
        }
        @if (_videoGameSystems.Count == 0)
        {
            <tr>
                <td colspan="2" class="centered no-data"><em>No Video Game Systems Available</em></td>
            </tr>
        }
        </tbody>
    </table>

    <div class="back-button">
        <a href="/video-games">&larr; Back</a>
    </div>
</main>

@code {
    private string _pageError = string.Empty;
    private IReadOnlyCollection<VideoGameSystemApiModel> _videoGameSystems = [];

    protected override async Task OnInitializedAsync()
    {
        await LoadSystems();
    }

    private async Task LoadSystems()
    {
        var result = await Mediator.Send(new GetAllVideoGameSystems.Request());

        if (result.IsSuccessful)
        {
            _videoGameSystems = result.Value ?? [];
        }
        else
        {
            _pageError = result.ErrorMessage;
        }
    }

    private async Task DeleteVideoGameSystem(VideoGameSystemApiModel videoGameSystem)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the video game system '{videoGameSystem.Name}'?"))
            return;

        await Mediator.Send(new DeleteVideoGameSystem.Request(videoGameSystem.VideoGameSystemId));

        await LoadSystems();
    }
}