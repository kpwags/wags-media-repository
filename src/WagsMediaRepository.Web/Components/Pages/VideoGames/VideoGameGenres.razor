@page "/video-games/genres"

@rendermode InteractiveServer

@using WagsMediaRepository.Web.Handlers.Commands.VideoGames
@using WagsMediaRepository.Web.Handlers.Queries.VideoGames

@inject IJSRuntime JSRuntime

<PageTitle>Video Game Genres - Wags Media Repository</PageTitle>

<main class="video-games-systems-page">
    <div class="table-title">
        <h1>Video Game Genres</h1>
        <div class="actions">
            <a href="/video-games/genres/add" class="button-primary">Add Genre</a>
        </div>
    </div>

    @if (!string.IsNullOrWhiteSpace(_pageError))
    {
        <div class="alert error">
            @_pageError
        </div>
    }

    <table class="data-table video-games-systems-table">
        <thead>
            <tr>
                <th class="name">Name</th>
                <th class="actions">Actions</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var videoGameGenre in _videoGameGenres)
        {
            <tr>
                <td class="name">@videoGameGenre.Name</td>
                <td class="centered actions">
                    <a href="/video-games/genres/edit/@videoGameGenre.VideoGameGenreId">Edit</a>
                    <button type="button" class="link-button" @onclick="@(() => DeleteVideoGameGenre(videoGameGenre))">Delete</button>
                </td>
            </tr>
        }
        @if (_videoGameGenres.Count == 0)
        {
            <tr>
                <td colspan="2" class="centered no-data"><em>No Video Game Genres Available</em></td>
            </tr>
        }
        </tbody>
    </table>

    <div class="back-button">
        <a href="/video-games">&larr; Back</a>
    </div>
</main>

@code {
    private string _pageError = string.Empty;
    private IReadOnlyCollection<VideoGameGenreApiModel> _videoGameGenres = [];

    protected override async Task OnInitializedAsync()
    {
        await LoadGenres();
    }

    private async Task LoadGenres()
    {
        var result = await Mediator.Send(new GetAllVideoGameGenres.Request());

        if (result.IsSuccessful)
        {
            _videoGameGenres = result.Value ?? [];
        }
        else
        {
            _pageError = result.ErrorMessage;
        }
    }

    private async Task DeleteVideoGameGenre(VideoGameGenreApiModel videoGameGenre)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the video game genre '{videoGameGenre.Name}'?"))
            return;

        await Mediator.Send(new DeleteVideoGameGenre.Request(videoGameGenre.VideoGameGenreId));

        await LoadGenres();
    }
}