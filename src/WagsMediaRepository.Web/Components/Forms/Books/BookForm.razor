@rendermode InteractiveServer

@using WagsMediaRepository.Web.Handlers.Commands.Books
@using WagsMediaRepository.Web.Handlers.Queries.Books

<EditForm EditContext="_editContext" OnSubmit="@SubmitForm" FormName="book-form">
    <DataAnnotationsValidator/>

    @if (!string.IsNullOrWhiteSpace(_pageError))
    {
    <div class="alert error">
        @_pageError
    </div>
    }

    <fieldset disabled="@_isProcessing" aria-busy="@_isProcessing">
        <div class="form-field">
            <label for="title">
                <span class="required-indicator">*</span>Title
                <InputText type="text" id="title" @bind-Value="@_model.Title" />
                <ValidationMessage For="@(() => _model.Title)"></ValidationMessage>
            </label>
        </div>
        
        <div class="form-field">
            <label for="subtitle">
                SubTitle
                <InputText type="text" id="subtitle" @bind-Value="@_model.SubTitle" />
                <ValidationMessage For="@(() => _model.SubTitle)"></ValidationMessage>
            </label>
        </div>

        <div class="form-field">
            <label for="author">
                <span class="required-indicator">*</span>Author
                <InputText type="text" id="author" @bind-Value="@_model.Author" />
                <ValidationMessage For="@(() => _model.Author)"></ValidationMessage>
            </label>
        </div>

        <div class="form-field">
            <label for="status">
                <span class="required-indicator">*</span>Status
                <RadzenDropDown
                    @bind-Value="@_model.BookStatusId"
                    Data="@_statuses"
                    TextProperty="@nameof(BookStatusApiModel.Name)"
                    ValueProperty="@nameof(BookStatusApiModel.BookStatusId)"
                    Name="status"
                    id="status"
                />
                <ValidationMessage For="@(() => _model.BookStatusId)"></ValidationMessage>
            </label>
        </div>

        <div class="form-field">
            <label for="bookType">
                <span class="required-indicator">*</span>Type
                <RadzenDropDown
                    @bind-Value="@_model.BookTypeId"
                    Data="@_types"
                    TextProperty="@nameof(BookTypeApiModel.Name)"
                    ValueProperty="@nameof(BookTypeApiModel.BookTypeId)"
                    Name="bookType"
                    id="bookType"
                />
                <ValidationMessage For="@(() => _model.BookTypeId)"></ValidationMessage>
            </label>
        </div>

        <div class="form-field">
            <label for="formats">
                <span class="required-indicator">*</span>Format(s)
                <RadzenDropDown
                    @bind-Value="@_model.FormatIds"
                    Data="@_formats"
                    TextProperty="@nameof(BookFormatApiModel.Name)"
                    ValueProperty="@nameof(BookFormatApiModel.BookFormatId)"
                    Name="formats"
                    Multiple="true"
                    AllowClear="true"
                    Chips="true"
                    id="formats"
                />
                <ValidationMessage For="@(() => _model.FormatIds)"></ValidationMessage>
            </label>
        </div>

        <div class="form-field">
            <label for="series">
                Series
                <RadzenDropDown
                    @bind-Value="@_model.BookSeriesId"
                    Data="@_series"
                    TextProperty="@nameof(BookSeriesApiModel.Name)"
                    ValueProperty="@nameof(BookSeriesApiModel.BookSeriesId)"
                    Name="series"
                    id="series"
                />
                <ValidationMessage For="@(() => _model.BookSeriesId)"></ValidationMessage>
            </label>
        </div>

        <div class="form-field">
            <label for="genres">
                <span class="required-indicator">*</span>Genre(s)
                <RadzenDropDown
                    @bind-Value="@_model.GenreIds"
                    Data="@_genres"
                    TextProperty="@nameof(BookGenreApiModel.Name)"
                    ValueProperty="@nameof(BookGenreApiModel.BookGenreId)"
                    Name="formats"
                    Multiple="true"
                    AllowClear="true"
                    Chips="true"
                    id="genres"
                />
                <ValidationMessage For="@(() => _model.GenreIds)"></ValidationMessage>
            </label>
        </div>

        <div class="form-field">
            <label for="link">
                <span class="required-indicator">*</span>Link
                <InputText type="text" id="link" @bind-Value="@_model.Link" />
                <ValidationMessage For="@(() => _model.Link)"></ValidationMessage>
            </label>
        </div>

        <div class="form-field">
            <label for="cover-image">
                Cover Image
                <InputText type="text" id="cover-image" @bind-Value="@_model.CoverImageUrl"/>
                <ValidationMessage For="@(() => _model.CoverImageUrl)"></ValidationMessage>
            </label>
        </div>

        <div class="form-field">
            <label for="sort-order">
                Sort Order
                <InputNumber id="sort-order" @bind-Value="@_model.SortOrder" />
                <ValidationMessage For="@(() => _model.SortOrder)"></ValidationMessage>
            </label>
        </div>

        <div class="form-field">
            <label for="date-started">
                Date Started
                <InputDate id="date-started" @bind-Value="@_model.DateStarted" />
                <ValidationMessage For="@(() => _model.DateStarted)"></ValidationMessage>
            </label>
        </div>

        <div class="form-field">
            <label for="date-completed">
                Date Completed
                <InputDate id="date-completed" @bind-Value="@_model.DateCompleted" />
                <ValidationMessage For="@(() => _model.DateCompleted)"></ValidationMessage>
            </label>
        </div>

        <div class="form-field">
            <label for="rating">
                Rating
                <RadzenRating @bind-Value="@_model.Rating" />
            </label>
        </div>

        <div class="form-field">
            <label for="thoughts">
                Thoughts
                <InputTextArea id="thoughts" @bind-Value="@_model.Thoughts" />
                <ValidationMessage For="@(() => _model.Thoughts)"></ValidationMessage>
            </label>
        </div>

        <div class="form-field">
            <label for="book-notes-link">
                Book Notes URL
                <InputText type="text" id="book-notes-link" @bind-Value="@_model.BookNotesUrl" />
                <ValidationMessage For="@(() => _model.BookNotesUrl)"></ValidationMessage>
            </label>
        </div>

        <div class="form-field">
            <label for="current-page">
                Current Page
                <InputNumber id="current-page" @bind-Value="@_model.CurrentPage" />
                <ValidationMessage For="@(() => _model.CurrentPage)"></ValidationMessage>
            </label>
        </div>

        <div class="form-field">
            <label for="page-count">
                Page Count
                <InputNumber id="page-count" @bind-Value="@_model.PageCount" />
                <ValidationMessage For="@(() => _model.PageCount)"></ValidationMessage>
            </label>
        </div>

        <div class="form-field">
            <label for="is-purchased">
                <RadzenSwitch
                    @bind-Value="@_model.IsPurchased"
                    id="is-purchased"
                />
                Is Purchased
            </label>
        </div>

        <div class="form-field">
            <label for="is-at-library">
                <RadzenSwitch
                    @bind-Value="@_model.IsAtLibrary"
                    id="is-at-library"
                />
                Is At Library
            </label>
        </div>

        <div class="form-field form-actions">
            <button type="submit">Save</button>
            <a href="/books/" class="button-ghost">Cancel</a>
        </div>
    </fieldset>
</EditForm>

@code {
    private string _pageError = string.Empty;
    private bool _isProcessing = true;
    private EditContext? _editContext;
    private SaveBook.Request _model = new();
    
    private IReadOnlyCollection<BookGenreApiModel> _genres = [];
    private IReadOnlyCollection<BookTypeApiModel> _types = [];
    private IReadOnlyCollection<BookFormatApiModel> _formats = [];
    private IReadOnlyCollection<BookSeriesApiModel> _series = [];
    private IReadOnlyCollection<BookStatusApiModel> _statuses = [];
    
    [Parameter] public BookApiModel? Book { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        var referenceDataResult = await Mediator.Send(new GetBookReferenceData.Request());

        if (!referenceDataResult.IsSuccessful)
        {
            _pageError = referenceDataResult.ErrorMessage;
            _isProcessing = false;
            return;
        }

        if (Book is not null)
        {
            _model = new SaveBook.Request(Book);
        }
        else
        {
            var nextSort = await Mediator.Send(new GetNextSortOrder.Request());

            _model = new SaveBook.Request
            {
                SortOrder = nextSort,
            };
        }

        _editContext = new EditContext(_model);

        _genres = referenceDataResult.Value?.Genres ?? [];
        _types = referenceDataResult.Value?.Types ?? [];
        _formats = referenceDataResult.Value?.Formats ?? [];
        _series = referenceDataResult.Value?.Series ?? [];
        _statuses = referenceDataResult.Value?.Statuses ?? [];
        
        _isProcessing = false;
    }
    
    private async Task SubmitForm(EditContext editContext)
    {
        _isProcessing = true;
        
        if (!editContext.Validate())
        {
            _isProcessing = false;
            return;
        }

        var result = await Mediator.Send(_model);
        
        if (!result.IsSuccessful)
        {
            _pageError = result.ErrorMessage;
            _isProcessing = false;
            return;
        }
        
        NavManager.NavigateTo("/books/", true);
    }
}