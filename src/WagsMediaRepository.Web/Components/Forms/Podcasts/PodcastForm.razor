@rendermode InteractiveServer

@using WagsMediaRepository.Web.Handlers.Commands.Podcasts
@using WagsMediaRepository.Web.Handlers.Queries.Podcasts

<EditForm EditContext="_editContext" OnSubmit="@SubmitForm" FormName="podcast-form">
    <DataAnnotationsValidator/>

    @if (!string.IsNullOrWhiteSpace(_pageError))
    {
        <div class="alert error">
            @_pageError
        </div>
    }

    <fieldset disabled="@_isProcessing" aria-busy="@_isProcessing">
        <div class="form-field">
            <label for="name">
                <span class="required-indicator">*</span>Name
                <InputText type="text" id="name" @bind-Value="@_model.Name"/>
                <ValidationMessage For="@(() => _model.Name)"></ValidationMessage>
            </label>
        </div>

        <div class="form-field">
            <label for="link">
                <span class="required-indicator">*</span>Link
                <InputText type="text" id="link" @bind-Value="@_model.Link" />
                <ValidationMessage For="@(() => _model.Link)"></ValidationMessage>
            </label>
        </div>

        <div class="form-field">
            <label for="category">
                <span class="required-indicator">*</span>Category
                <RadzenDropDown
                    @bind-Value="@_model.PodcastCategoryId"
                    Data="@_podcastCategories"
                    TextProperty="@nameof(PodcastCategoryApiModel.Name)"
                    ValueProperty="@nameof(PodcastCategoryApiModel.PodcastCategoryId)"
                    Name="podcast-category"
                />
                <ValidationMessage For="@(() => _model.PodcastCategoryId)"></ValidationMessage>
            </label>
        </div>

        <div class="form-field">
            <label for="cover-image">
                <span class="required-indicator">*</span>Cover Image
                <InputText type="text" id="cover-image" @bind-Value="@_model.CoverImageUrl" />
                <ValidationMessage For="@(() => _model.CoverImageUrl)"></ValidationMessage>
            </label>
        </div>

        <div class="form-field form-actions">
            <button type="submit">Save</button>
            @if (Podcast is not null)
            {
                <a href="/podcasts/categories" class="button-ghost">Cancel</a>
            }
        </div>
    </fieldset>
</EditForm>

@code {
    private bool _isProcessing;
    private string _pageError = string.Empty;
    private EditContext? _editContext;
    private SavePodcast.Request _model = new();
    
    private IReadOnlyCollection<PodcastCategoryApiModel> _podcastCategories = [];

    [Parameter] public PodcastApiModel? Podcast { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var podcastCategoryResult = await Mediator.Send(new GetAllPodcastCategories.Request());

        if (!podcastCategoryResult.IsSuccessful)
        {
            _pageError = podcastCategoryResult.ErrorMessage;
            return;
        }

        _podcastCategories = podcastCategoryResult.Value ?? [];
        
        if (Podcast is not null)
        {
            _model = new()
            {
                PodcastId = Podcast.PodcastId,
                PodcastCategoryId = Podcast.PodcastCategoryId,
                Name = Podcast.Name,
                Link = Podcast.Link,
                CoverImageUrl = Podcast.CoverImageUrl,
            };
        }

        _editContext = new EditContext(_model);
    }

    private async Task SubmitForm()
    {
        _isProcessing = true;

        var result = await Mediator.Send(_model);

        if (!result.IsSuccessful)
        {
            _pageError = result.ErrorMessage;
            _isProcessing = false;
            return;
        }

        NavManager.NavigateTo("/podcasts/", true);
    }
}