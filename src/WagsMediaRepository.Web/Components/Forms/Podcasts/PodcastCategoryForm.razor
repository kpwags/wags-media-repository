@rendermode InteractiveServer

@using WagsMediaRepository.Web.Handlers.Commands.Podcasts

<EditForm EditContext="_editContext" OnSubmit="@SubmitForm" FormName="podcast-category-form">
    <DataAnnotationsValidator/>

    @if (!string.IsNullOrWhiteSpace(_pageError))
    {
        <div class="alert error">
            @_pageError
        </div>
    }

    <fieldset disabled="@_isProcessing" aria-busy="@_isProcessing">
        <div class="form-field">
            <label for="name">
                <span class="required-indicator">*</span>Name
                <InputText type="text" id="name" @bind-Value="@_model.Name"/>
                <ValidationMessage For="@(() => _model.Name)"></ValidationMessage>
            </label>
        </div>

        <div class="form-field">
            <label for="color-code">
                <span class="required-indicator">*</span>Color Code
                <InputText type="text" id="color-code" @bind-Value="@_model.ColorCode"/>
                <ValidationMessage For="@(() => _model.ColorCode)"></ValidationMessage>
            </label>
        </div>

        <div class="form-field form-actions">
            <button type="submit">Save</button>
            @if (PodcastCategory is not null)
            {
                <a href="/podcasts/categories" class="button-ghost">Cancel</a>
            }
        </div>
    </fieldset>
</EditForm>

@code {
    private bool _isProcessing;
    private string _pageError = string.Empty;
    private EditContext? _editContext;
    private SavePodcastCategory.Request _model = new();

    [Parameter] public PodcastCategoryApiModel? PodcastCategory { get; set; }

    protected override void OnInitialized()
    {
        if (PodcastCategory is not null)
        {
            _model = new()
            {
                PodcastCategoryId = PodcastCategory.PodcastCategoryId,
                ColorCode = PodcastCategory.ColorCode,
                Name = PodcastCategory.Name,
            };
        }

        _editContext = new EditContext(_model);
    }

    private async Task SubmitForm()
    {
        _isProcessing = true;

        var result = await Mediator.Send(_model);

        if (!result.IsSuccessful)
        {
            _pageError = result.ErrorMessage;
            _isProcessing = false;
            return;
        }

        NavManager.NavigateTo("/podcasts/categories", true);
    }
}